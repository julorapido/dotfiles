import { Range } from 'graphql-language-service';
import type { Logger, NoopLogger } from './Logger';
declare type TagResult = {
    tag: string;
    template: string;
    range: Range;
};
declare const parserMap: {
    '.js': import("./parsers/types").SourceParser;
    '.jsx': import("./parsers/types").SourceParser;
    '.mjs': import("./parsers/types").SourceParser;
    '.es': import("./parsers/types").SourceParser;
    '.es6': import("./parsers/types").SourceParser;
    '.esm': import("./parsers/types").SourceParser;
    '.cjs': import("./parsers/types").SourceParser;
    '.ts': import("./parsers/types").SourceParser;
    '.tsx': import("./parsers/types").SourceParser;
    '.cts': import("./parsers/types").SourceParser;
    '.mts': import("./parsers/types").SourceParser;
    '.svelte': import("./parsers/types").SourceParser;
    '.vue': import("./parsers/types").SourceParser;
    '.astro': import("./parsers/types").SourceParser;
};
export declare function findGraphQLTags(text: string, ext: keyof typeof parserMap, uri: string, logger: Logger | NoopLogger): TagResult[];
export {};
//# sourceMappingURL=findGraphQLTags.d.ts.map